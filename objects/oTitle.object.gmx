<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Title Menu
if !instance_exists(oScreen)
{
    instance_create(0, 0, oScreen);
}

text1position = 15;
text2position = text1position + 15;

text1positionmenu = 5;
text2positionmenu = text1positionmenu + 15;

flip = 0;
angle = 0;
rotatespeed = 1;
angle_limit = 25;

extrasize = 0;
extrasizespeed = 0.02;
extrasizelimit = 0.4;

sound[0] = sndPaddull;
sound[1] = sndBaddull;

colour = c_white;
hue = 0;

menu = false;
startgame = false;

global.practice = false;

gamepadsInit();

global.reverse[2] = false;

menuInit(working_directory + "title.txt", text1position + 20, 8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Text Transform + Sound
if menu == false
{
    if angle &gt; angle_limit or angle &lt; -angle_limit
    {
        rotatespeed = -rotatespeed;
    }
    angle += rotatespeed;
    
    if extrasize &gt; extrasizelimit or extrasize &lt; -extrasizelimit
    {
        extrasizespeed = -extrasizespeed;
    }
    extrasize += extrasizespeed;
    
    //Sound
    if !audio_is_playing(sound[0]) and !audio_is_playing(sound[1])
    {
        audio_sound_pitch(sound[flip], 1 /*0.9 + random(0.2) - 0.1*/);
        audio_play_sound(sound[flip], 1, false);
        flip += 1;
        if flip &gt; 1
        {
            flip = 0;
        }
    }
    
    if menuConfirm() == true
    {
        menu = true;
    }
}
else
{
    angle = 0;
    
    if menuSelectbutton() == true
    {
        if global.secret == false
        {
            global.secret = true;
            button_text[0] = "Cool Mode";
        }
        else
        {
            global.secret = false;
            button_text[0] = "Versus";
        }
    }

    menuSelect();
    if menuConfirm() == true
    {
        if global.secret == true
        {
            global.coolmode = true;
        }
        else
        {
            global.coolmode = false;
        }
        switch (selection)
        {
            case 0:
                audio_play_sound(sndBounce, 1, false);
                global.practice = false;
                keyboard_key_release(ord('I'));
                keyboard_key_release(ord('K'));
                keyboard_key_release(ord('J'));
                startgame = true;
                break;
            case 1:
                // TODO: SET CODE FOR AI PLAYER HERE!
                global.practice = true;
                audio_play_sound(sndBounce, 1, false);
                startgame = true;
                break;
            case 2:
                global.practice = false;
                room_goto(rOptions);
                break;
            default: 
                audio_play_sound(sndBounce, 1, false);
                startgame = true;
                break;
        }
    }
    if global.secret == true
    {
        colour = make_color_hsv(hue, 255, 255);
        hue += 10;
    }
    else
    {
        colour = c_white;
    }
}
if startgame == true
{
    if !audio_is_playing(sndBounce)
    {
        room_goto(rRink);
    }
}
if keyboard_check_pressed(vk_escape)
{
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Title
draw_set_font(fontScore);
draw_set_halign(fa_center);
if menu == false
{
    if !audio_is_playing(sound[1])
    {
        draw_set_colour(c_maroon);
        draw_text_transformed(room_width/2, text1position, "PADDLE", 2 + extrasize, 2 + extrasize, angle);
    }
    else
    {
        draw_set_colour(c_blue);
        draw_text_transformed(room_width/2, text2position, "BADDLE", 2 + extrasize, 2 + extrasize, angle);
    }
}
else
{
    draw_set_colour(colour);
    draw_text_transformed(room_width/2 + global.secret, text1positionmenu + global.secret, "PADDLE", 2 , 2 , angle);
    draw_set_colour(c_maroon);
    draw_text_transformed(room_width/2, text1positionmenu, "PADDLE", 2 , 2 , angle);
    
    draw_set_colour(colour);
    draw_text_transformed(room_width/2 + global.secret, text2positionmenu + global.secret, "BADDLE", 2 , 2 , angle);
    draw_set_colour(c_blue);
    draw_text_transformed(room_width/2, text2positionmenu, "BADDLE", 2 , 2 , angle);
    
    menuButtons(menu_pos, text_line, colour);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

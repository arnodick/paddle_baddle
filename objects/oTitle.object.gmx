<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen Create
if !instance_exists(oScreen)
{
    instance_create(0, 0, oScreen);
}

text1position = 15;
text2position = text1position + 15

angle = 0;
rotatespeed = 1;
angle_limit = 25;

extrasize = 0;
extrasizespeed = 0.01;
extrasizelimit = 0.2;

sound[0] = sndPaddull;
sound[1] = sndBaddull;

j = 0;

gamepadCount = gamepad_get_device_count();
global.gamepads[gamepadCount] = false;
global.dead_zone = 0.35;
for (var i = 0; i &lt; gamepadCount; i++;)
{
    if gamepad_is_connected(i)
    {
        global.gamepads[i] = true;
    }
    else
    {
        global.gamepads[i] = false;
    }
    if gamepad_is_connected(i)
    {
        gamepad_set_axis_deadzone(i, global.dead_zone);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Text Transform + Sound
if angle &gt; angle_limit or angle &lt; -angle_limit
{
    rotatespeed = -rotatespeed;
}
angle += rotatespeed;

if extrasize &gt; extrasizelimit or extrasize &lt; -extrasizelimit
{
    extrasizespeed = -extrasizespeed;
}
extrasize += extrasizespeed;

//Sound
if !audio_is_playing(sound[0]) and !audio_is_playing(sound[1])
{
    audio_sound_pitch(sound[j], 1 /*0.9 + random(0.2) - 0.1*/);
    audio_play_sound(sound[j], 1, false);
    j += 1;
    if j &gt; 1
    {
        j = 0;
    }
}

if gamepad_button_check_pressed(0, gp_face1) or gamepad_button_check_pressed(0, gp_face2) or gamepad_button_check_pressed(0, gp_face3) or gamepad_button_check_pressed(0, gp_face4) or gamepad_button_check_pressed(0, gp_start)
or gamepad_button_check_pressed(1, gp_face1) or gamepad_button_check_pressed(1, gp_face2) or gamepad_button_check_pressed(1, gp_face3) or gamepad_button_check_pressed(1, gp_face4) or gamepad_button_check_pressed(1, gp_start)
{
    room_goto(rRink);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Title
surface_set_target(global.screen);
    draw_set_font(fontScore);
    draw_set_halign(fa_center);
    //draw_text_colour(room_width/2, 10, "PADDLE", c_red, c_red, c_red, c_red, 1);
    //draw_text_colour(room_width/2, 20, "BADDLE", c_blue, c_blue, c_blue, c_blue, 1);
    if !audio_is_playing(sound[1])
    {
        draw_set_colour(c_maroon);
        draw_text_transformed(room_width/2, text1position, "PADDLE", 2 + extrasize, 2 + extrasize, angle);
    }
    else
    {
        draw_set_colour(c_blue);
        draw_text_transformed(room_width/2, text2position, "BADDLE", 2 + extrasize, 2 + extrasize, angle);
    }
    //draw_set_alpha(0.1);
    //draw_set_alpha(1);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

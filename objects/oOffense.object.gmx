<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
count = 0;

length = 0;

debug = "no";

slow_speed = 1;
slap_speed = 2;

slap_timer = 0;
start_slap_timer = false;
last_length = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
if (count == 0)
{
    colour = c_maroon;
}
else
{
    colour = c_blue;
}
if (global.gamepads[count] == true)
{
    length = point_distance(0, 0, gamepad_axis_value(count, gp_axisrh), gamepad_axis_value(count, gp_axisrv));
    if (gamepad_axis_value(count, gp_axisrh) != 0 or gamepad_axis_value(count, gp_axisrv) != 0) and speed &lt; slow_speed
    {
        if last_length &lt; global.dead_zone
        {
            start_slap_timer = true;
        }
        direction = point_direction( 0, 0, gamepad_axis_value(count, gp_axisrh), gamepad_axis_value(count, gp_axisrv) );
        speed = length;
        if start_slap_timer == true
        {
            if length &gt; 0.9
            {
                speed = speed*4;
                start_slap_timer = false;
                slap_timer = 0;
            }
            else
            {
                slap_timer += 1;
            }
        }

    }
    else
    {
        
        speed -= speed/16;
    }
    last_length = length;
    debug = string(last_length);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Images
surface_set_target(global.screen);
    draw_set_colour(colour);
    draw_point(x, y);
    if (count == 1)
{
    draw_text(room_width/2, 10, debug);
    }
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

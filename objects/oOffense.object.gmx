<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
player_num = 0;

colour = c_white;
tail_length = 8;
tail_width = 2;

length = 0;

hp = 1;

debug = "no";

slow_speed = 1;
slap_speed = 2.5;
decel = 40;

slap_timer = 0;
start_slap_timer = false;
slap_timer_threshhold = 1;
slap_length = 0.75;
if global.coolmode == true
{
    slap_length = 0;
}

last_length = 1;

coll_vert[4] = 0;
coll_horz[4] = 0;

bouncetimer = 25;
controltimer = 0;
control = true;

defense = 0;
sidewall = 0;
horwall = 0;
rinkside = 0;
offense = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls

defense = instance_nearest(x, y, oDefense);
sidewall = instance_nearest(x, y, oSidewall);
horwall = instance_nearest(x, y, oWall);
rinkside = instance_nearest(x, y, oSide);
offense = instance_furthest(x, y, oOffense);

if (global.gamepads[player_num] == true)
{
    length = point_distance(0, 0, gamepad_axis_value(player_num, gp_axisrh), gamepad_axis_value(player_num, gp_axisrv));
    if (gamepad_axis_value(player_num, gp_axisrh) != 0 or gamepad_axis_value(player_num, gp_axisrv) != 0) and speed &lt; slow_speed and controltimer == 0 and global.gameover == false 
    {
        control = true;
        if (last_length &lt; global.dead_zone and player_num == rinkside.player_side) or global.coolmode == true //and x!= (room_width/2) - 1
        {
            start_slap_timer = true;
        }
        direction = point_direction( 0, 0, gamepad_axis_value(player_num, gp_axisrh), gamepad_axis_value(player_num, gp_axisrv) );
        speed = length;
        if start_slap_timer == true and slap_timer &lt; slap_timer_threshhold
        {
            if length &gt; slap_length
            {
                speed = slap_speed;
                start_slap_timer = false;
                slap_timer = 0;
            }
            else
            {
                slap_timer += 1;
            }
        }
        else
        {
            start_slap_timer = false;
            slap_timer = 0;
        }
    }
    else
    {
        control = false;
        speed -= speed/decel;
    }
    last_length = length;
    debug = string(last_length);
}

coll_vert[0] = ceil(x);
coll_vert[1] = ceil(y + lengthdir_y(speed, direction));
coll_vert[2] = floor(x);
coll_vert[3] = floor(y + lengthdir_y(speed, direction));

if point_in_rectangle(coll_vert[0], coll_vert[1], defense.wall[0], defense.wall[1], defense.wall[2], defense.wall[3])
{
    if round(vspeed) == 0
    {
        vspeed = defense.vspeed*2;
    }
    else
    {
        vspeed = -vspeed;
    }
    controltimer = global.crashtimer;
    audio_play_sound(sndHurt, 1, false);
}

if point_in_rectangle(coll_vert[0], coll_vert[1], horwall.wall[0], horwall.wall[1], horwall.wall[2], horwall.wall[3] + speed) and horwall.y &gt; y
{
    vspeed = -vspeed;
    controltimer = bouncetimer;
    audio_play_sound(sndSelect, 1, false);
}

else if point_in_rectangle(coll_vert[0], coll_vert[1], horwall.wall[0], horwall.wall[1] - speed, horwall.wall[2], horwall.wall[3]) and horwall.y &lt; y
{
    vspeed = -vspeed;
    controltimer = bouncetimer;    
    audio_play_sound(sndSelect, 1, false);
}

coll_horz[0] = ceil(x + lengthdir_x(speed, direction));
coll_horz[1] = ceil(y);
coll_horz[2] = floor(x + lengthdir_x(speed, direction));
coll_horz[3] = floor(y);

if point_in_rectangle(coll_horz[0], coll_horz[1], defense.wall[0] - speed, defense.wall[1], defense.wall[2], defense.wall[3]) and defense.x &lt; x
{
    hspeed = -hspeed;
    controltimer = global.crashtimer;
    audio_play_sound(sndHurt, 1, false);
}

else if point_in_rectangle(coll_horz[0], coll_horz[1], defense.wall[0], defense.wall[1], defense.wall[2] + speed, defense.wall[3]) and defense.x &gt; x
{
    hspeed = -hspeed;
    controltimer = global.crashtimer;
    audio_play_sound(sndHurt, 1, false);
}

if point_in_rectangle(coll_horz[0], coll_horz[1], sidewall.wall[0], sidewall.wall[1], sidewall.wall[2], sidewall.wall[3])
{
    if player_num == sidewall.side
    {
        hspeed = -hspeed;
        controltimer = bouncetimer;
        audio_play_sound(sndSelect, 1, false);
    }

    else
    {
        audio_play_sound(sndGoal, 1, false);
        resetOffense();
        global.playerpoints[player_num] += 1;
        /*
        speed = 0;
        x = oGame.off_pos[player_num, 0];
        y = oGame.off_pos[player_num, 1];
        controltimer = 0;
        */
        
    }
}

if controltimer &gt; 0
{
    control = false;
    controltimer -= 1;
}
else
{
    control = true;
}

if
(
// This code causes a bug: when this instance kills the enemy, the "offense.x" variables get set so that this instance's collision point is always in the given rectangle. (Why is this rectangle so big?)
point_in_rectangle(coll_horz[0], coll_horz[1], ceil(offense.x), ceil(offense.y), ceil(offense.x), ceil(offense.y))
or point_in_rectangle(coll_vert[0], coll_vert[1], ceil(offense.x), ceil(offense.y), ceil(offense.x), ceil(offense.y))
or point_in_rectangle(coll_horz[2], coll_horz[3], ceil(offense.x), ceil(offense.y), ceil(offense.x), ceil(offense.y))
or point_in_rectangle(coll_vert[2], coll_vert[3], ceil(offense.x), ceil(offense.y), ceil(offense.x), ceil(offense.y))
//point_in_rectangle(offense.x, offense.y, ceil(x), ceil(y), ceil( ), ceil(offense.y))
//or point_in_rectangle(offense.x, offense.y, ceil(offense.x), ceil(offense.y), ceil(offense.x), ceil(offense.y))
)
and
offense.control == false
and
// This code fixes the above bug, but means that both offense pucks can NEVER be destroyed at the same time. Which one gets destroyed if both crash into each other seems arbitrary. Problem?
instance_number(oOffense) == 2
{
    createParticles(offense.x, offense.y, global.colour);
    audio_play_sound(sndDeath, 1, false);
    offense.hp = 0;
    //resetOffense();
}
if hp == 0
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Images
/*
    draw_set_colour(c_white);
    draw_point(coll_vert[0], coll_vert[1] - 1);
    draw_point(coll_horz[0], coll_horz[1] - 1);
*/
if global.gameover == true
{
    draw_set_alpha(0.2);
}

draw_point_colour(x, y - 1, colour);

if speed &gt; slow_speed + 0.1
{
    draw_set_blend_mode( bm_add );
    draw_line_width_colour(x, y - 1, x - lengthdir_x(speed*tail_length, direction), y - 1 -lengthdir_y(speed*tail_length, direction), tail_width, colour, c_black);
    //draw_point(x - lengthdir_x(speed, direction), y - 1 - lengthdir_y(speed, direction));
}

if control == false
{
    draw_set_blend_mode( bm_add );
    //draw_circle_colour(x + 1 + random_range(-controltimer, controltimer)/20, y + random_range(-controltimer, controltimer)/20, controltimer/10, colour, c_black, false);
    draw_circle_colour(x + 1 + random_range(-controltimer, controltimer)/20, y + random_range(-controltimer, controltimer)/20, controltimer/10, colour, c_black, false);
    draw_roundrect_colour_ext(x + 1 - random_range(-controltimer, controltimer)/10, y - random_range(-controltimer, controltimer)/10, x + 1 + random_range(-controltimer, controltimer)/10, y + random_range(-controltimer, controltimer)/10, 1, 1, colour, c_black, false);
}
draw_set_blend_mode( bm_normal );
draw_set_alpha(1);

/*
if defense.x &lt; x
    draw_rectangle(defense.wall[0] - speed, defense.wall[1], defense.wall[2], defense.wall[3], false);
else if defense.x &gt; x
    draw_rectangle(defense.wall[0], defense.wall[1], defense.wall[2] + speed, defense.wall[3], false);
if (player_num == 1)
{
    draw_text(room_width/2, 10, debug);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
player_num = 0;

colur = c_white;

length = 0;

debug = "no";

slow_speed = 1;
slap_speed = 2.5;
decel = 40;

slap_timer = 0;
start_slap_timer = false;
slap_timer_threshhold = 1;
slap_length = 0.75;

last_length = 0;

coll_vert[2] = 0;
coll_horz[2] = 0;

maxtimer = 50;
controltimer = maxtimer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
if (global.gamepads[player_num] == true)
{
    length = point_distance(0, 0, gamepad_axis_value(player_num, gp_axisrh), gamepad_axis_value(player_num, gp_axisrv));
    if (gamepad_axis_value(player_num, gp_axisrh) != 0 or gamepad_axis_value(player_num, gp_axisrv) != 0) and speed &lt; slow_speed and controltimer &gt;= maxtimer
    {
        if last_length &lt; global.dead_zone
        {
            start_slap_timer = true;
        }
        direction = point_direction( 0, 0, gamepad_axis_value(player_num, gp_axisrh), gamepad_axis_value(player_num, gp_axisrv) );
        speed = length;
        if start_slap_timer == true and slap_timer &lt; slap_timer_threshhold
        {
            if length &gt; slap_length
            {
                speed = slap_speed;
                start_slap_timer = false;
                slap_timer = 0;
            }
            else
            {
                slap_timer += 1;
            }
        }
        else
        {
            start_slap_timer = false;
            slap_timer = 0;
        }
    }
    else
    {
        speed -= speed/decel;
    }
    last_length = length;
    debug = string(last_length);
}

defense = instance_nearest(x, y, oDefense);
sidewall = instance_nearest(x, y, oSidewall);
horwall = instance_nearest(x, y, oWall);

coll_vert[0] = x ;
coll_vert[1] = y + lengthdir_y(speed, direction);

if point_in_rectangle(coll_vert[0], coll_vert[1], defense.wall[0], defense.wall[1], defense.wall[2], defense.wall[3])
{
    vspeed = -vspeed;
    controltimer = 0;
}

if point_in_rectangle(coll_vert[0], coll_vert[1], horwall.wall[0], horwall.wall[1], horwall.wall[2], horwall.wall[3] + speed) and horwall.y &gt; y
{
    vspeed = -vspeed;
    controltimer = 0;    
}

else if point_in_rectangle(coll_vert[0], coll_vert[1], horwall.wall[0], horwall.wall[1] - speed, horwall.wall[2], horwall.wall[3]) and horwall.y &lt; y
{
    vspeed = -vspeed;
    controltimer = 0;    
}

coll_horz[0] = x + lengthdir_x(speed, direction);
coll_horz[1] = y;

if point_in_rectangle(coll_horz[0], coll_horz[1], defense.wall[0] - speed, defense.wall[1], defense.wall[2], defense.wall[3]) and defense.x &lt; x
{
    hspeed = -hspeed;
    controltimer = 0;    
}

else if point_in_rectangle(coll_horz[0], coll_horz[1], defense.wall[0], defense.wall[1], defense.wall[2] + speed, defense.wall[3]) and defense.x &gt; x
{
    hspeed = -hspeed;
    controltimer = 0;    
}

if point_in_rectangle(coll_horz[0], coll_horz[1], sidewall.wall[0], sidewall.wall[1], sidewall.wall[2], sidewall.wall[3])
{
    if player_num == sidewall.side
    {
        hspeed = -hspeed;
        controltimer = 0;
    }
    else
    {
        speed = 0;
        x = oGame.off_pos[player_num, 0];
        y = oGame.off_pos[player_num, 1];
        controltimer = maxtimer;
        global.playerpoints[player_num] += 1;
    }
}

if controltimer &lt; maxtimer
{
    controltimer += 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Images
surface_set_target(global.screen);
/*
    draw_set_colour(c_white);
    draw_point(coll_vert[0], coll_vert[1] - 1);
    draw_point(coll_horz[0], coll_horz[1] - 1);
*/
    draw_set_colour(colour);
    draw_point(x, y - 1);
    
    /*
    if defense.x &lt; x
        draw_rectangle(defense.wall[0] - speed, defense.wall[1], defense.wall[2], defense.wall[3], false);
    else if defense.x &gt; x
        draw_rectangle(defense.wall[0], defense.wall[1], defense.wall[2] + speed, defense.wall[3], false);
    if (player_num == 1)
    {
        draw_text(room_width/2, 10, debug);
    }
    */
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

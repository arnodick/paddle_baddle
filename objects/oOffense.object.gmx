<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
player_num = 0;

colour = c_white;
tail_length = 8;
tail_width = 2;

length = 0;
length_max = 0.9

hor = 0;
ver = 0;

hp = 1;

debug = "no";

slow_speed = 1;
slap_speed = 2.5;
decel = 40;
slap_ready = false;
slap_timer = 0;


//slap_timer = 0;
//start_slap_timer = false;
//slap_timer_threshhold = 3;
slap_length = 0.8;
if global.coolmode == true
{
    slap_length = 0;
}

last_length = 1;
second_last_length = 0;

coll_vert[4] = 0;
coll_horz[4] = 0;

bouncetimer = 25;
crashtimer = 70;
controltimer = 0;
control = true;

defense = 0;
sidewall = 0;
horwall = 0;
rinkside = 0;
offense = 0;

//anal_sticks[2, 4] = 0; // huhuhu, anal

anal_stick[0, 0] = gp_axislh;
anal_stick[0, 1] = gp_axislv;
anal_stick[0, 2] = gp_axisrh;
anal_stick[0, 3] = gp_axisrv;

anal_stick[1, 0] = gp_axisrh;
anal_stick[1, 1] = gp_axisrv;
anal_stick[1, 2] = gp_axislh;
anal_stick[1, 3] = gp_axislv;

key_control[0, 0] = ord('F');
key_control[0, 1] = ord('H');
key_control[0, 2] = ord('T');
key_control[0, 3] = ord('G');

key_control[1, 0] = ord('J');
key_control[1, 1] = ord('L');
key_control[1, 2] = ord('I');
key_control[1, 3] = ord('K');
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls

defense = instance_nearest(x, y, oDefense);
sidewall = instance_nearest(x, y, oSidewall);
horwall = instance_nearest(x, y, oWall);
rinkside = instance_nearest(x, y, oSide);
offense = instance_furthest(x, y, oOffense);

if (global.gamepads[player_num] == true)
{
    length = point_distance(0, 0, gamepad_axis_value(player_num, anal_stick[player_num, 2]), gamepad_axis_value(player_num, anal_stick[player_num, 3]));
    if (length != 0) and speed &lt; slow_speed and control == true //and oGame.gameover == false and oGame.goal == false and oGame.countdown == false
    {
        direction = point_direction( 0, 0, gamepad_axis_value(player_num, anal_stick[player_num, 2]), gamepad_axis_value(player_num, anal_stick[player_num, 3]) );
        speed = length * length_max;
        if (last_length &lt; global.dead_zone and player_num == rinkside.player_side)// or global.coolmode == true //and x!= (room_width/2) - 1
        {
            if length &gt;= slap_length
            {
                speed = slap_speed;
            }
        }
    }
    else
    {
        speed -= speed/decel;
    }
    last_length = length;
    //debug = string(last_length);
}
else
{
    if keyArrowspressed(key_control) == true and speed &lt; slow_speed and control == true
    {
        length = length_max;
        if keyboard_check (key_control[player_num, 0]) 
            {hor = -1;}
        else if keyboard_check (key_control[player_num, 1])
            {hor = 1;}
        else
            {hor = 0;}
        if keyboard_check (key_control[player_num, 2])
            {ver = -1;}
        else if keyboard_check (key_control[player_num, 3])
            {ver = 1;}
        else
            {ver = 0;}
        direction = point_direction( 0, 0, hor, ver );
        speed = length;
        if slap_ready == true 
        {
            if slap_timer &lt; 5
            {
                slap_timer += 1;
                if player_num == rinkside.player_side
                {
                    if keyArrowspress(key_control) == true
                    {
                        speed = slap_speed;
                        slap_ready = false;
                        slap_timer = 0;
                    }
                }
            }
            else 
            {
                slap_ready = false;
                slap_timer = 0;
            }
        }
        else if keyArrowspress(key_control) == true
        {
            slap_ready = true;
        }
    }
    else
    {
        length = 0;
        speed -= speed/decel;
    }
    second_last_length = last_length;
    last_length = length;
}

coll_vert[0] = ceil(x);
coll_vert[1] = ceil(y + lengthdir_y(speed, direction));
coll_vert[2] = floor(x);
coll_vert[3] = floor(y + lengthdir_y(speed, direction));

if point_in_rectangle(coll_vert[0], coll_vert[1], defense.wall[0], defense.wall[1], defense.wall[2], defense.wall[3])
{
    if round(vspeed) == 0
    {
        vspeed = defense.vspeed*2;
    }
    else
    {
        vspeed = -vspeed;
    }
    controltimer = crashtimer;
    audio_play_sound(sndHurt, 1, false);
}

if point_in_rectangle(coll_vert[0], coll_vert[1], horwall.wall[0], horwall.wall[1], horwall.wall[2], horwall.wall[3] + speed) and horwall.y &gt; y
{
    vspeed = -vspeed;
    if controltimer &lt; bouncetimer
    {
        controltimer = bouncetimer;
    }
    audio_play_sound(sndSelect, 1, false);
}

else if point_in_rectangle(coll_vert[0], coll_vert[1], horwall.wall[0], horwall.wall[1] - speed, horwall.wall[2], horwall.wall[3]) and horwall.y &lt; y
{
    vspeed = -vspeed;
    if controltimer &lt; bouncetimer
    {
        controltimer = bouncetimer;
    }
    audio_play_sound(sndSelect, 1, false);
}

coll_horz[0] = ceil(x + lengthdir_x(speed, direction));
coll_horz[1] = ceil(y);
coll_horz[2] = floor(x + lengthdir_x(speed, direction));
coll_horz[3] = floor(y);

if point_in_rectangle(coll_horz[0], coll_horz[1], defense.wall[0] - speed, defense.wall[1], defense.wall[2], defense.wall[3]) and defense.x &lt; x
{
    hspeed = -hspeed;
    controltimer = crashtimer;
    audio_play_sound(sndHurt, 1, false);
}

else if point_in_rectangle(coll_horz[0], coll_horz[1], defense.wall[0], defense.wall[1], defense.wall[2] + speed, defense.wall[3]) and defense.x &gt; x
{
    hspeed = -hspeed;
    controltimer = crashtimer;
    audio_play_sound(sndHurt, 1, false);
}

if point_in_rectangle(coll_horz[0], coll_horz[1], sidewall.wall[0], sidewall.wall[1], sidewall.wall[2], sidewall.wall[3])
{
    if player_num == sidewall.side or oGame.gameover == true
    {
        hspeed = -hspeed;
        if controltimer &lt; bouncetimer
        {
            controltimer = bouncetimer;
        }
        audio_play_sound(sndSelect, 1, false);
    }

    else
    {
        resetOffense();
        audio_play_sound(sndGoal, 1, false);
        oGame.playerpoints[player_num] += 1;
        oGame.goal = true;
        oGame.hue = colour_get_hue(oGame.playercolour[player_num]);
    }
}

if
(
// This code causes a bug: when this instance kills the enemy, the "offense.x" variables get set so that this instance's collision point is always in the given rectangle. (Why is this rectangle so big?)
point_in_rectangle(coll_horz[0], coll_horz[1], ceil(offense.x), ceil(offense.y), ceil(offense.x), ceil(offense.y))
or point_in_rectangle(coll_vert[0], coll_vert[1], ceil(offense.x), ceil(offense.y), ceil(offense.x), ceil(offense.y))
or point_in_rectangle(coll_horz[2], coll_horz[3], ceil(offense.x), ceil(offense.y), ceil(offense.x), ceil(offense.y))
or point_in_rectangle(coll_vert[2], coll_vert[3], ceil(offense.x), ceil(offense.y), ceil(offense.x), ceil(offense.y))
//point_in_rectangle(offense.x, offense.y, ceil(x), ceil(y), ceil( ), ceil(offense.y))
//or point_in_rectangle(offense.x, offense.y, ceil(offense.x), ceil(offense.y), ceil(offense.x), ceil(offense.y))
)
{
    if instance_number(oOffense) == 2
    {
        if offense.control == false
        {
            // This code fixes the above bug, but means that both offense pucks can NEVER be destroyed at the same time. Which one gets destroyed if both crash into each other seems arbitrary. Problem?
            createParticles(offense.x, offense.y, offense.colour);
            audio_play_sound(sndDeath, 1, false);
            offense.hp = 0;
            //resetOffense();
        }
    }
}
if controltimer &gt; 0
{
    control = false;
    controltimer -= 1;
}
else
{
    control = true;
}
if hp == 0
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Images
/*
    draw_set_colour(c_white);
    draw_point(coll_vert[0], coll_vert[1] - 1);
    draw_point(coll_horz[0], coll_horz[1] - 1);
*/
if oGame.gameover == true
{
    draw_set_alpha(0.2);
}

draw_point_colour(x, y - 1, colour);

if speed &gt; slow_speed + 0.1
{
    draw_set_blend_mode( bm_add );
    draw_line_width_colour(x, y - 1, x - lengthdir_x(speed*tail_length, direction), y - 1 -lengthdir_y(speed*tail_length, direction), tail_width, colour, c_black);
    //draw_point(x - lengthdir_x(speed, direction), y - 1 - lengthdir_y(speed, direction));
}

if control == false
{
    draw_set_blend_mode( bm_add );
    //draw_circle_colour(x + 1 + random_range(-controltimer, controltimer)/20, y + random_range(-controltimer, controltimer)/20, controltimer/10, colour, c_black, false);
    draw_circle_colour(x + 1 + random_range(-controltimer, controltimer)/20, y + random_range(-controltimer, controltimer)/20, controltimer/10, colour, c_black, false);
    draw_roundrect_colour_ext(x + 1 - random_range(-controltimer, controltimer)/10, y - random_range(-controltimer, controltimer)/10, x + 1 + random_range(-controltimer, controltimer)/10, y + random_range(-controltimer, controltimer)/10, 1, 1, colour, c_black, false);
}
draw_set_blend_mode( bm_normal );
draw_set_alpha(1);

//draw_text_transformed_colour(room_width/2, room_height/2 - 5 - (player_num+1)*5, length, 1, 1, 0, c_white, c_white, c_white, c_white, 1);


/*
if defense.x &lt; x
    draw_rectangle(defense.wall[0] - speed, defense.wall[1], defense.wall[2], defense.wall[3], false);
else if defense.x &gt; x
    draw_rectangle(defense.wall[0], defense.wall[1], defense.wall[2] + speed, defense.wall[3], false);
if (player_num == 1)
{
    draw_text(room_width/2, 10, debug);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
